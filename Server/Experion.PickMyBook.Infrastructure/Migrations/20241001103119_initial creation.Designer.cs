// <auto-generated />
using System;
using Experion.PickMyBook.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Experion.PickMyBook.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20241001103119_initial creation")]
    partial class initialcreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<int?>("AvailableCopies")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string[]>("ImageUrls")
                        .HasMaxLength(3)
                        .HasColumnType("text[]");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PublishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Borrowings", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BorrowDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BorrowingStatusValue")
                        .HasColumnType("integer");

                    b.Property<decimal?>("FineAmt")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("BorrowingStatusValue");

                    b.HasIndex("UserId");

                    b.ToTable("Borrowings");
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.BorrowingStatus", b =>
                {
                    b.Property<int>("BorrowingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BorrowingStatusId"));

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("BorrowingStatusId");

                    b.ToTable("BorrowingStatuses");

                    b.HasData(
                        new
                        {
                            BorrowingStatusId = 1,
                            Status = 1
                        },
                        new
                        {
                            BorrowingStatusId = 2,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("RequestStatusValue")
                        .HasColumnType("integer");

                    b.Property<int>("RequestTypeValue")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId");

                    b.HasIndex("BookId");

                    b.HasIndex("RequestStatusValue");

                    b.HasIndex("RequestTypeValue");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.RequestStatus", b =>
                {
                    b.Property<int>("RequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestStatusId"));

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("RequestStatusId");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            RequestStatusId = 1,
                            Status = 1
                        },
                        new
                        {
                            RequestStatusId = 2,
                            Status = 2
                        },
                        new
                        {
                            RequestStatusId = 3,
                            Status = 3
                        });
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestTypeId"));

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            Type = 1
                        },
                        new
                        {
                            RequestTypeId = 2,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.Role", b =>
                {
                    b.Property<int>("RoleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleTypeId"));

                    b.Property<string>("RoleTypeValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleTypeId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("RoleTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Borrowings", b =>
                {
                    b.HasOne("Book", "Book")
                        .WithMany("Borrowings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Experion.PickMyBook.Infrastructure.Models.BorrowingStatus", "BorrowingStatus")
                        .WithMany()
                        .HasForeignKey("BorrowingStatusValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Experion.PickMyBook.Infrastructure.Models.User", "User")
                        .WithMany("Borrowings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BorrowingStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.Request", b =>
                {
                    b.HasOne("Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Experion.PickMyBook.Infrastructure.Models.RequestStatus", "RequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Experion.PickMyBook.Infrastructure.Models.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Experion.PickMyBook.Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.User", b =>
                {
                    b.HasOne("Experion.PickMyBook.Infrastructure.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("Experion.PickMyBook.Infrastructure.Models.User", b =>
                {
                    b.Navigation("Borrowings");
                });
#pragma warning restore 612, 618
        }
    }
}
